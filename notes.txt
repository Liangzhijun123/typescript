-- Chapter 1 --

-to run the typescript type 'tsc main.ts -w' continue to watch main.ts for any changes

1: 'tsc main.ts'
2: click go live server in vscode at the bottom
3: 'tsc main.ts -w' in order to recompile JS so it watch if the file is changed

File structure 
-build (HTML, CSS, JS, nested directory)
-src (raw files, components, Typescript)

4:'tsc --init' to initalize the file

5: uncomment "rootDir": "./src" in tsconfig.json file
  uncomment "outDir": "./build/js", 
  -'./src' because it is where typscript file will be
  -'./build/js' so now JS can compile here

6: tsc -w will now look for all the files in the directories

'"target": "es2016", ' recompile JS variables to be 'let' instead of 'var'

If i want to delete a file in 'ts' you have to delete 'js' too
If you put a ts file in the root (dont do it), it also compile the js in the root 

scroll down to end of tsconfig.json and include 
  - "include": [
    "src"
  ]
  -now when you creat a file in root it doesn't pop out the js file

-uncomment out '"noEmitOnError": true,' in tsconfig.json it lets JS compile or typescript error
-comment out '"noEmitOnError": true,' so we can see the typescript error

 
// defind a user name. if we run both files main.ts and main.js we get error.
// if we chane the string to something else it won't work because it needs to recompile in main.js
let username = 'alice';
console.log(username);

// typescript need  ':number/string' to indicate what it is
let a: number = 12;
let b: number =6;
let c: number = 2;

// this is a valid JS code but ts dont like it. can't mulitple string with number
console.log(a / b);

// typescrip doesn't get in JS way
console.log(c * b);


-- Chapter 2 --

-Static typing and dynamic typing is not the same as strongly type

-A language that is strongly typed can be either statically or dynamic typed

-TS is a static type language. types are checked at compile time.
-JS is dynamic type language. types are checked at run time 

-TS infer
  -implicitly shown. not restricted what it is
  -explicitly state that the varible is what type

  ex:
    // if mouse over this it will say 'let myName :string'. 
    // implicitly -> not shown the type
    let myName = 'Dave'

    // explicitly -> no longer inferring because we declare it is a string
    let myName: string = 'Dave'

let myName: string = 'John';
let meaningOfLife: number;
let isLoading: boolean;

// 'any' can be any data types
let album: any;

// union type. string or number -> either one is ok
let wallet: string | number;

let postID: string | number;

// can be more than two types
let isActive: number | boolean | string;

// basic expression to select all words
let regular_Expression: RegExp = /\w+/g;

myName = 'Dave';
meaningOfLife = 42;
isLoading = true;
album = 'van halen';

// function
const sum = (a: number, b: string) => {
    return a + b;
}



-- Chapter 3 --
